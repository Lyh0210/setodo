import win.ui;
import win.ui.menu;
import win.ui.atom;
import win.util.tray;
import winex;
import mouse;
import fsys.ini;
import win.ui.tooltip; 
import fsys.dlg;
import process;
import console;
import util;
/*DSG{{*/
mainForm = win.form(text="日常轻单 v0.98 by bituplink.com";right=404;bottom=522;border="dialog frame";composited=1;max=false)
mainForm.add(
btnAddTodo={cls="button";text="添加";left=344;top=16;right=396;bottom=42;z=1};
btnTodoTrans={cls="button";text="待办转移至";left=163;top=48;right=243;bottom=74;z=10};
checklistDone={cls="checklist";left=10;top=324;right=394;bottom=507;edge=1;font=LOGFONT(strike=1;h=-14);items={};z=4};
checklistTodo={cls="checklist";left=10;top=83;right=394;bottom=278;edge=1;font=LOGFONT(h=-14);items={};z=3};
datetimepick={cls="datetimepick";left=71;top=48;right=157;bottom=74;edge=1;font=LOGFONT(h=-13);z=7};
datetimepickTrans={cls="datetimepick";left=248;top=48;right=336;bottom=74;edge=1;font=LOGFONT(h=-13);z=9};
editAddTodo={cls="edit";left=10;top=16;right=336;bottom=42;edge=1;font=LOGFONT(h=-14);z=2};
static1={cls="static";text="待办列表";left=10;top=53;right=72;bottom=69;notify=1;transparent=1;z=6};
static2={cls="static";text="完成列表";left=10;top=298;right=65;bottom=319;transparent=1;z=5};
staticTop={cls="static";text="窗口置顶";left=336;top=299;right=391;bottom=320;notify=1;transparent=1;z=8}
)
/*}}*/

// debug
// console.varDump()


// 单实例运行功能
var atom,hwndConflict = mainForm.atom("21FD3719-8C39-4D33-8DC2-9B0103A4DE69");   
if(!atom){  
    /*为窗口设置原子值可以避免一个程序重复运行多个实例*/  
    win.quitMessage();//程序退出  
    return;  
};


// 在窗口上创建tooltip对象, mainForm是界面主窗口的名称，可以改变，但是需要保持一致
var toolTipObj = win.ui.tooltip(mainForm);

// 给控件添加悬停提示, btnAddFile是之前创建的按键控件的名称， 0x10/*_TTF_SUBCLASS*/参数表示默认提示
toolTipObj.addTool(mainForm.btnTodoTrans, "默认转移当前所有待办项，也可以鼠标右键转移每一个待办项", 0x10/*_TTF_SUBCLASS*/ );
toolTipObj.addTool(mainForm.datetimepickTrans, "默认转移到明天，也可以自选任意日期", 0x10/*_TTF_SUBCLASS*/ );


// 增加双击修改内容的样式能力
mainForm.checklistTodo.modifyStyle(,0x200/*_LVS_EDITLABELS*/)


function loadIniFile(){
	
	// 加载数据前清空旧数据
	mainForm.checklistTodo.clear();
	mainForm.checklistDone.clear();	
	todoLevelTable = {};
	
	var dayTime = mainForm.datetimepick.time;
	
	// 默认设置转移的日期为下一天
	var dayOriginTime = mainForm.datetimepick.time
	var defaultNextDayTime = dayOriginTime.addday(1);
	mainForm.datetimepickTrans.time = defaultNextDayTime;
	
	dayTime.format="%Y%m%d";
	var dayString = tostring(dayTime)
	
	// 当前日期对应的存储文件路径
	iniData = fsys.ini("\data\setodo_" + dayString + ".ini");

	var iniDataList = iniData.readSectionNames();
	
	mainForm.checklistTodo.clrText=0x000000
	mainForm.checklistTodo.redraw()

	// 有数据则加载到应用
	if(iniDataList!=null){
		
		sectionTodo = iniData.getSection("ToDoList");
    	for( k,v in sectionTodo){
    		mainForm.checklistTodo.addItem(v, tonumber(k));
    		changeTodoLevel(tonumber(k), 0)
    	}
    	
    	sectionDone = iniData.getSection("DoneList");
    	for( k,v in sectionDone){
    		mainForm.checklistDone.addItem(v, tonumber(k));
    		mainForm.checklistDone.setChecked(k);
    	}
    	
    	sectionToDoLevel = iniData.getSection("ToDoLevelList");
    	for(k,v in sectionToDoLevel){
    		changeTodoLevel(tonumber(k), v)
    	}
	}
}


/*主要逻辑代码{{*/
// 添加待办记录内容到列表的功能
function addCntToList(){
	// 字符串长度为零，没有输入，不处理
	if(!(#mainForm.editAddTodo.text)){
		return ; 
	}

    // 将文本框内容增加到待办列表
	addItemIndex = mainForm.checklistTodo.addItem(mainForm.editAddTodo.text);
	changeTodoLevel(addItemIndex, 0)
	
	// 输入文本框清空,方便用户下次重新输入
	mainForm.editAddTodo.text = "";	
}


// 将输入文本框的内容放置到待办事项列表中，增加待办事项
mainForm.btnAddTodo.oncommand = function(id,event){
	addCntToList();
}


// 消息回调不起作用,是因为回车键是对话框的快捷键之一,可以重写mainForm.isDialogMessage函数
mainForm.isDialogMessage = function(hwnd,msg){  
    if (   (msg.message >= 0x100/*_WM_KEYFIRST*/) && (msg.message <= 0x108/*_WM_KEYLAST*/) ) { 
        if(msg.wParam==0xD/*_VK_ENTER*/){ 
            return false //使回车键不是对话框快捷键
        }
    }   
    return win.isDialogMessage(hwnd,msg);   
}


// 回车事件处理，调用增加输入内容到待办列表中
mainForm.editAddTodo.wndproc = function(hwnd,message,wparam,lparam){
    select(message) {//判断消息类型
        case 0x100/*_WM_KEYDOWN*/ {
            if(wparam == 0xD/*_VK_RETURN*/){
                addCntToList();
            }
        }   
    }
}


// 单个待办事项转移函数
function transTodo(itemIndex, cntStr){
	
	var selectDayTime = mainForm.datetimepickTrans.time;
	
	selectDayTime.format="%Y%m%d";
	var selectDayString = tostring(selectDayTime)
	
	// 当前日期对应的存储文件路径
	var selectIniData = fsys.ini("\data\setodo_" + selectDayString + ".ini");

    var todoList = selectIniData.readKeys("ToDoList");	
    
    var transSeq = #todoList + 1
    
    keyString = "" + transSeq;
 	selectIniData.write("ToDoList", keyString, cntStr);
 	
	// 把优先级也要写过去
	transColor = todoLevelTable[tostring(itemIndex)];
	selectIniData.write("ToDoLevelList", keyString, transColor);
}


// 在全局变量中设置待办事项的优先级
function changeTodoLevel(checkListItemIndex, levelNum){
	
	var keyName = "" + checkListItemIndex
	
	// 将待办事项的优先级信息存储到全局变量
	todoLevelTable[keyName] = levelNum
	
	int_levelNum = tonumber(levelNum)
	
	// 按照不同的级别设置颜色 switch case , 其中1 2 3分别为高 中 低优先级, 对应 0x0045FF 0x20A5DA 0x32CD32
	// 0是默认的级别，就是字体的颜色，此处是黑色
	select (int_levelNum){
		case 0{
				mainForm.checklistTodo._clrText[checkListItemIndex]=0x000000
    			mainForm.checklistTodo.redraw()
		}
		case 1{
    			mainForm.checklistTodo._clrText[checkListItemIndex]=0x0045FF
    			mainForm.checklistTodo.redraw()
		}
		case 2{
			    mainForm.checklistTodo._clrText[checkListItemIndex]=0xD00614
    			mainForm.checklistTodo.redraw()
		}
		case 3{
			    mainForm.checklistTodo._clrText[checkListItemIndex]=0x32CD32
    			mainForm.checklistTodo.redraw()
		}

	}	
}

// 批量
function autoBatchChangeColor(seqNum){
	var todoList = mainForm.checklistTodo.items;
	for(i=seqNum; #todoList; 1){
		
		var nextIndex = i+1
		changeLevelColor = todoLevelTable[tostring(nextIndex)]
		changeTodoLevel(i, changeLevelColor)
	}	
}


// 勾选待办事项实现转移到已完成的功能
mainForm.checklistTodo.onnotify = function(id,code,ptr){
	
	if( code == 0xFFFFFFF4/*_NM_CUSTOMDRAW*/ ){
    	owner._clrText:=..table.array(owner.count,owner.columnCount,0);
    	
        var lvcd = owner.getNotifyCustomDraw(code,ptr);
        
        if( lvcd.nmcd.dwDrawStage == 0x10001/*_CDDS_ITEMPREPAINT*/)
                return 0x20/*_CDRF_NOTIFYSUBITEMDRAW*/
        elseif( lvcd.nmcd.dwDrawStage == 1/*_CDDS_PREPAINT*/ ){
                return 0x20/*_CDRF_NOTIFYITEMDRAW*/;
        }
        elseif( lvcd.nmcd.dwDrawStage == ( 0x10001/*_CDDS_ITEMPREPAINT*/ | 0x20000/*_CDDS_SUBITEM*/) ){
			lvcd.clrText=owner._clrText[lvcd.nmcd.dwItemSpec+1];
		
			lvcd.update()
			return 0/*_CDRF_DODEFAULT*/
        }
    }
	elseif( code == 0xFFFFFF9B/*_LVN_ITEMCHANGED*/ ){ 
 	 	var nmChecklist = mainForm.checklistTodo.getNotifyMessage(code,ptr);
 	 	if( !nmChecklist )
 	 		return;
 	 		
 	 	if( nmChecklist.uNewState & 0xF000/*_LVIS_STATEIMAGEMASK*/){
 	 		var selIndex = nmChecklist.iItem;
 	 		if( mainForm.checklistTodo.getChecked( selIndex ) ){
 	 			
 	 			// 实现待办事项的转移并获取移动后的索引值，用于下面状态的修改
 	 			checkListAddIndex = mainForm.checklistDone.addItem(mainForm.checklistTodo.getItemText(selIndex,1));
 	 			
 	 			// 将已完成的事项状态改为勾选
 	 			mainForm.checklistDone.setChecked(checkListAddIndex);
 	 			
 	 			// 将待办事项转移后，删除待办列表中的记录
 	 			mainForm.checklistTodo.delItem(selIndex);
 	 			
 	 			//changeTodoLevel(selIndex, 0)
 	 			autoBatchChangeColor(selIndex)
 	 		} 
 	 	}  
 	 }
 	 elseif( code = 0xFFFFFFFB/*_NM_RCLICK*/ ){
 	 
 	 	var nmListView = mainForm.checklistTodo.getNotifyMessage(code,ptr);
 	 	
 	 	// 创建弹出菜单
		var popmenu = win.ui.popmenu(mainForm); 
		
		popmenu.add('删除',function(id){ 
				mainForm.checklistTodo.delItem( nmListView.iItem )
				
				autoBatchChangeColor(nmListView.iItem)
				
		} ) 
		
		popmenu.add('转移待办',function(id){ 
				var transTodoCnt = mainForm.checklistTodo.getItemText(nmListView.iItem,1)
				transTodo(nmListView.iItem, transTodoCnt)
				
				mainForm.checklistTodo.delItem( nmListView.iItem )
				
				// 这块也要写优先级的处理逻辑,优先级重回需要网上刷
				autoBatchChangeColor(nmListView.iItem)
				
		} ) 
		
		popmenu.add('设置高优先级',function(id){ 
				changeTodoLevel( nmListView.iItem, 1)
		} ) 
		
		popmenu.add('设置中优先级',function(id){ 
				changeTodoLevel( nmListView.iItem, 2)
		} ) 
		
		popmenu.add('设置低优先级',function(id){ 
				changeTodoLevel( nmListView.iItem, 3)
		} ) 
		
		popmenu.add('清除优先级',function(id){ 
				changeTodoLevel( nmListView.iItem, 0)
		} ) 
		
		// 在最后一次鼠标事件的位置弹出，采用默认方式
		popmenu.popup();
		
		popmenu.close();
			
 	 }
 	 elseif(code = 0xFFFFFF51/*_LVN_BEGINLABELEDITW*/ ){ 
	 	return false; //允许编辑项
	 }
	 elseif( code == 0xFFFFFF50/*_LVN_ENDLABELEDITW*/ ){
	 	var dispInfo = mainForm.checklistTodo.getNotifyDispInfo(code,ptr); 
	 	if( dispInfo ? dispInfo.item.text ) {
	 		mainForm.checklistTodo.setItemText(dispInfo.item.text, dispInfo.item.iItem);
	 	}
	 }
     elseif(code = 0xFFFFFFFD/*_NM_DBLCLK*/) {
         mainForm.checklistTodo.editLable()
     }
 
}

// 去勾选已完成事项实现状态变为到待办的功能
mainForm.checklistDone.onnotify = function(id,code,ptr){

	if( code == 0xFFFFFF9B/*_LVN_ITEMCHANGED*/ ){ 
 	 	var nmChecklist = mainForm.checklistDone.getNotifyMessage(code,ptr);
 	 	if( !nmChecklist )
 	 		return;
 	 		
 	 	if( nmChecklist.uOldState & 0xF000/*_LVIS_STATEIMAGEMASK*/){
 	 		var selIndex = nmChecklist.iItem;
 	 		if(! mainForm.checklistDone.getChecked( selIndex ) ){
 	 			
 	 			checkListAddIndex = mainForm.checklistTodo.addItem(mainForm.checklistDone.getItemText(selIndex,1));
 	 			
 	 			mainForm.checklistTodo.setChecked(checkListAddIndex,false);
 	 			
 	 			changeTodoLevel(checkListAddIndex, 0)
 	 			
 	 			mainForm.checklistDone.delItem(selIndex);
 	 		} 
 	 	}  
 	 }
 	 elseif( code = 0xFFFFFFFB/*_NM_RCLICK*/ ){
 	 
 	 	var x,y = win.getMessagePos();  
 	 	var nmListView = mainForm.checklistDone.getNotifyMessage(code,ptr);
 	 	
 	 	// 创建弹出菜单
		var popmenu = win.ui.popmenu(mainForm); 
		popmenu.add('删除',function(id){ 
				mainForm.checklistDone.delItem( nmListView.iItem )
		} ) 
		popmenu.popup(x,y,true);
		
		popmenu.close();
 	 } 
}

// 程序退出处理代码
function saveIniFile(){
    iniData.write("ToDoList",null) 
	iniData.write("DoneList",null) 
	iniData.write("ToDoLevelList",null)
	
    var todoList = mainForm.checklistTodo.items;
	for(i=1;#todoList;1){
      	keyString = "" + i;
 	  	iniData.write("ToDoList",keyString,mainForm.checklistTodo.getItemText(i,1));
	}
			
    var doneList = mainForm.checklistDone.items;	
	for(i=1;#doneList;1){
      	keyString = "" + i;
 	  	iniData.write("DoneList",keyString,mainForm.checklistDone.getItemText(i,1));
	}
	
	for k, v in todoLevelTable{
		iniData.write("ToDoLevelList", tostring(k) , tostring(v));
	}
}

// 软件退出前保存数据
mainForm.wndproc = function(hwnd,message,wparam,lparam){
    select(message) {   //判断消息类型
        case 0x10/*_WM_CLOSE*/  //窗口关闭消息
        {
			saveIniFile();
        }
    }
}
/*}}*/

/*程序界面吸附边栏的代码{{*/
// 增加窗口贴边停靠吸附到上左右边栏的功能
var side = "";
mainForm.wndproc = function(hwnd,msg,wParam,lParam){
    select(msg){
        case 0x3/*_WM_MOVE*/  {//移动窗口
            if(!mainForm.processing){//不在处理中
                checkWindowPos()
            }
        }case 0xA1/*_WM_NCLBUTTONDOWN*/ {//按下左键移动窗口
            side=""
        }case 0xA0/*_WM_NCMOUSEMOVE*/{//在标题栏及窗的边框体移动鼠标
            checkWindowPos()
        }
    }
}

checkWindowPos = function(){
    var scrw = win.getScreen();
    var left,top,width = win.getPos(mainForm.hwnd,true);
    var right = left + width;
    if(left <= 0 )  side = "left";
    if(scrw <= right) side = "right";           
    if(top <= 0)  side = "top";
    if(left>0 && top>0 && scrw>right )  side = ""
}

dock = function(bl){
    if( win.isIconic(mainForm.hwnd) and mainForm.docking and  side != ""){
        mainForm.show( 0x1/*_SW_NORMAL*/ )
    }elseif(win.isIconic(mainForm.hwnd)){//缩至任务栏不处理后续语句
        return;
    }
    if(mainForm.processing){return ; }//正在处理
    mainForm.processing = true;
    var arg = bl ? {0xC00000/*_WS_CAPTION*/;null} : {null;0xC00000/*_WS_CAPTION*/};
    mainForm.modifyStyle(table.unpack(arg)); 
        
    var scrw = win.getScreen();
    var n;
    var countnum = 10;
    var delnum = 1;
    var left,top,width,height = win.getPos(mainForm.hwnd,true);
    if(bl){//逐渐隐藏
        select(side) {
            case "left"{
                if(mainForm.left = 0){
                for(i=1;countnum;1){
                    n = (i=countnum) ? 4 : width - (width/countnum)*i;
                    mainForm.left = -width + n;
                    mainForm.right = n;
                    win.delay(delnum)
                }
                }
            }case "top"{
                if(mainForm.top = 0){ 
                for(i=1;countnum;1){
                    n = (i=countnum) ? 4 : height - (height/countnum)*i;
                    mainForm.top = -height + n;
                    mainForm.bottom = n;
                    win.delay(delnum)
                }
                }
            }case "right"{
                if(mainForm.right = scrw){
                for(i=1;countnum;1){
                    n = (i=countnum) ? 4 : width - (width/countnum)*i;
                    mainForm.left = scrw - n;
                    mainForm.right = scrw -n + width;
                    win.delay(delnum)
                }
                }
            }
        }
    }else{
        if(mainForm.docking){//逐渐恢复
            win.setTopmost(mainForm.hwnd);
            win.setTopmost(mainForm.hwnd,false)
            select(side) {
                case "left"{
                    if(mainForm.right = 4){
                        for(i=countnum;1;-1){
                            n = (i=1) ? width : width - (width/countnum)*i;
                            mainForm.left = -width + n;
                            mainForm.right = n;
                            win.delay(delnum)
                        }
                    }
                }case "top"{
                    if(mainForm.bottom = 4){
                        for(i=countnum;1;-1){
                            n = (i=1) ? height : height - (height/countnum)*i;
                            mainForm.top = -height + n;
                            mainForm.bottom = n;
                            win.delay(delnum)
                        }
                    }
                }case "right"{
                    if(mainForm.left = scrw-4){
                        for(i=countnum;1;-1){
                            n = (i=1) ? width : width - (width/countnum)*i;
                            mainForm.left = scrw - n;
                            mainForm.right = scrw -n + width;
                            win.delay(delnum)
                        }
                    }
                }
            }
        }
    }
    left,top,width,height = win.getPos(mainForm.hwnd,true);
    select(side) {
        case "left"{
            mainForm.left = bl ? (-width+4) : (!mainForm.docking ? left : 0); //鼠标窗口内，分未吸附和已吸附两种情况
            mainForm.right = bl ? 4 : (!mainForm.docking ? (width + left) : width);
        }case "top"{
            mainForm.top = bl ? (-height+4) : (!mainForm.docking ? top : 0);
            mainForm.bottom = bl ? 4 : (!mainForm.docking ? (height + top) : height);     
        }case "right"{
            mainForm.left = bl ? (scrw-4) : (!mainForm.docking ? mainForm.left : scrw-width);
            mainForm.right = bl ? (scrw-4 + width) : (!mainForm.docking ? mainForm.right : scrw);
        }
    }
    mainForm.docking = bl ? true : false;//记录状态
    mainForm.processing = false;//处理完
}

var tmId = mainForm.addtimer(
    100,
    function(){
        var hwnd = winex.fromPoint( mouse.getPos() );
        if(win.getThreadProcessId(hwnd)  !== thread.getId()){ //判断鼠标是否在窗体内
            if(#side>0) dock(true); //side为空字串说明在中间或底部，无需处理
        }else{     
            if(#side>0) dock(false);
        }
    }
)
/*}}*/

/*软件功能区菜单代码{{*/
// 创建主菜单
var menu = win.ui.menu(mainForm);

// 创建第一个弹出菜单
mainForm.popmenu = win.ui.popmenu(mainForm);
mainForm.popmenu.add('&打开文件',function(id){

	// 打开之前保存的记录
	var fileLoaded = fsys.dlg.open("指定文件|setodo_*.ini|","选择打开历史记录文件","/data");
	
	// 用户取消加载新文件的处理
	if(fileLoaded!=null){
	    // 未关闭窗口情况下切换记录文件也需要保存一次数据
	    saveIniFile();
	
	    var fileLoadedName = io.splitpath(fileLoaded).file;
	
	    // 获取并刷新日期变量
	    dayString = string.sub(fileLoadedName, 8, 15);
	    
	    iniData = fsys.ini("\data\" + fileLoadedName);
	
	    mainForm.checklistTodo.clear();
	    mainForm.checklistDone.clear();
	
	    // 软件重新加载选定文件的记录信息
	    loadIniFile();
	}
});

menu.add('文件',mainForm.popmenu)


// ----分隔处

// 第二个弹出菜单
mainForm.secondmenu = win.ui.popmenu(mainForm);//创建弹出菜单

mainForm.secondmenu.add('&使用说明',function(id){
	process.execute("http://www.bituplink.com/windows_setodo.html");	
});

mainForm.secondmenu.add('&捐助',function(id){
	process.execute("http://www.bituplink.com/donate");
});

menu.add('帮助', mainForm.secondmenu)
/*}}*/

/*托盘支持功能代码{{*/
// 增加托盘功能支持，包括托盘图标，右键托盘功能列表，托盘鼠标时间等
exeTray = win.util.tray(mainForm.hwnd);
exeTray.message = 0xACCF/*_WM_TRAYMESSAGE*/;

mainForm.popmenuTray = win.ui.popmenu(mainForm);
mainForm.popmenuTray.add('打开窗口',function(id){
    mainForm.show(true)//打开窗口
});
mainForm.popmenuTray.add('最小化',function(id){
    mainForm.hitmin()
})
mainForm.popmenuTray.add('退出',function(id){ 
    mainForm.close() 
})

mainForm.wndproc = function(hwnd,message,wparam,lparam){

    if( message == 0xACCF/*_WM_TRAYMESSAGE*/ ) { //托盘回调信息
    
        select(lparam){
            case 0x203/*_WM_LBUTTONDBLCLK*/{ //双击托盘图标打开窗口 
                if( win.isVisible(mainForm.hwnd) ){
                    mainForm.hitmin()  //最小化窗口 
                }
                else {
                    mainForm.show(0x9/*_SW_RESTORE*/);
                    win.setForeground(mainForm.hwnd)
                }
            }
            case 0x205/*_WM_RBUTTONUP*/ {//单击鼠标右键弹出菜单
                x,y = mouse.getPos();
                mainForm.popmenuTray.popup( x,y,true )
            }  
            case 0x201/*_WM_LBUTTONDOWN*/ {//单击鼠标左键前置窗口
                win.setForeground(mainForm.hwnd) 
            }        
        }                                                  
    } 
    elseif( message == 0x112/*_WM_SYSCOMMAND*/ ){ //系统命令消息
        if( wparam == 0xF020/*_SC_MINIMIZE*/ ){ //用户点击了最小化按钮
            mainForm.show(false); //隐藏窗口
            return true;//阻击默认消息传递，取消最小化过程
        } 
    }
                    
}  

mainForm.onClose = function(hwnd,message,wParam,lParam){
    exeTray.delete();
}
/*}}*/

// 修改时间要尝试加载文件
mainForm.datetimepick.onnotify = function(id,code,ptr){
	
	if(code == 0xFFFFFD09/*_DTN_DATETIMECHANGE*/ ){ 
		saveIniFile();
		loadIniFile();
	}
}

// 修改转移时间要判断禁止修改至当天
mainForm.datetimepickTrans.onnotify = function(id,code,ptr){
	
	if(code == 0xFFFFFD09/*_DTN_DATETIMECHANGE*/ ){ 
		var dayTime = mainForm.datetimepick.time;
	
		// 默认设置转移的日期为下一天
		var dayTransTime = mainForm.datetimepickTrans.time
		
		if(dayTime.diffday(dayTransTime) == 0){
			mainForm.msgbox("不能设置转移时间为当天!")
			
			// 把时间设置回明天
			var defaultNextDayTime = dayTransTime.addday(1);
			mainForm.datetimepickTrans.time = defaultNextDayTime;	
		}
	}
}

mainForm.staticTop.oncommand = function(id,event){
	if(mainForm.staticTop.text = "窗口置顶"){
		win.setTopmost(mainForm.hwnd,true)
		mainForm.staticTop.text = "取消置顶"
	}else{
		win.setTopmost(mainForm.hwnd,false)
		mainForm.staticTop.text = "窗口置顶"
	}
}

mainForm.btnTodoTrans.oncommand = function(id,event){
	// 批量转移所有的待办事项到指定的日期
	var todoList = mainForm.checklistTodo.items;	
	for(i=1;#todoList;1){
 	  	transTodo(i, mainForm.checklistTodo.getItemText(i,1))	
	}
	
	mainForm.checklistTodo.clear();
}


mainForm.enableDpiScaling();
mainForm.show();

loadIniFile();

return win.loopMessage();

