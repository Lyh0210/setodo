import win.ui;
import win.ui.menu;
import win.ui.atom;
import win.util.tray;
import winex;
import mouse;
import fsys.ini;
import fsys.dlg;
import process;
/*DSG{{*/
mainForm = win.form(text="日常轻单 v0.6 by bituplink.com";right=383;bottom=465;border="dialog frame";max=false)
mainForm.add(
btnAddTodo={cls="button";text="添加";left=318;top=14;right=370;bottom=40;z=1};
checklistDone={cls="checklist";left=14;top=282;right=370;bottom=445;edge=1;font=LOGFONT(strike=1;h=-14);items={};z=4};
checklistTodo={cls="checklist";left=14;top=77;right=370;bottom=240;edge=1;font=LOGFONT(h=-14);items={};z=3};
editAddTodo={cls="edit";left=14;top=15;right=309;bottom=41;edge=1;font=LOGFONT(h=-14);z=2};
static1={cls="static";text="待办列表";left=14;top=51;right=75;bottom=69;notify=1;transparent=1;z=6};
static2={cls="static";text="完成列表";left=14;top=257;right=75;bottom=275;transparent=1;z=5}
)
/*}}*/

// 单实例运行功能
var atom,hwndConflict = mainForm.atom("21FD3719-8C39-4D33-8DC2-9B0103A4DE69");   
if(!atom){  
    /*为窗口设置原子值可以避免一个程序重复运行多个实例*/  
    win.quitMessage();//程序退出  
    return;  
};

// 增加双击修改内容的样式能力
mainForm.checklistTodo.modifyStyle(,0x200/*_LVS_EDITLABELS*/)

var timeNow =time.now() ; 
timeNow.format = "%Y%m%d";
var dayString = tostring(timeNow);

// 生成当天的存储文件
iniData = fsys.ini("\data\setodo_" + dayString + ".ini");


function loadIniFile(){
	var iniDataList = iniData.readSectionNames();

	// 有数据则加载到应用
	if(iniDataList!=null){
	
		sectionTodo = iniData.getSection("ToDoList");
    	for(k,v in sectionTodo){
    		mainForm.checklistTodo.addItem(v);
    	}
    	
    	sectionDone = iniData.getSection("DoneList");
    	for(k,v in sectionDone){
    		addIndex = mainForm.checklistDone.addItem(v);
    		mainForm.checklistDone.setChecked(addIndex);
    	} 
	}
}

loadIniFile();

// 添加待办记录内容到列表的功能
function addCntToList(){
	// 字符串长度为零，没有输入，不处理
	if(!(#mainForm.editAddTodo.text)){
		return ; 
	}

    // 将文本框内容增加到待办列表
	mainForm.checklistTodo.addItem(mainForm.editAddTodo.text);
	
	// 输入文本框清空,方便用户下次重新输入
	mainForm.editAddTodo.text = "";	
}

// 将输入文本框的内容放置到待办事项列表中，增加待办事项
mainForm.btnAddTodo.oncommand = function(id,event){
	addCntToList();
}

//消息回调不起作用,是因为回车键是对话框的快捷键之一,可以重写mainForm.isDialogMessage函数
mainForm.isDialogMessage = function(hwnd,msg){  
    if (   (msg.message >= 0x100/*_WM_KEYFIRST*/) && (msg.message <= 0x108/*_WM_KEYLAST*/) ) { 
        if(msg.wParam==0xD/*_VK_ENTER*/){ 
            return false //使回车键不是对话框快捷键
        }
    }   
    return win.isDialogMessage(hwnd,msg);   
}

// 回车事件处理，调用增加输入内容到待办列表中
mainForm.editAddTodo.wndproc = function(hwnd,message,wparam,lparam){
    select(message) {//判断消息类型
        case 0x100/*_WM_KEYDOWN*/ {
            if(wparam == 0xD/*_VK_RETURN*/ or wparam == 0x20/*_VK_SPACE*/){
                addCntToList();
            }
        }   
    }
}
  
//  勾选待办事项实现转移到已完成的功能
mainForm.checklistTodo.onnotify = function(id,code,ptr){
	
	if( code == 0xFFFFFF9B/*_LVN_ITEMCHANGED*/ ){ 
 	 	var nmChecklist = mainForm.checklistTodo.getNotifyMessage(code,ptr);
 	 	if( !nmChecklist )
 	 		return;
 	 		
 	 	if( nmChecklist.uNewState & 0xF000/*_LVIS_STATEIMAGEMASK*/){
 	 		var selIndex = nmChecklist.iItem;
 	 		if( mainForm.checklistTodo.getChecked( selIndex ) ){
 	 			
 	 			// 实现待办事项的转移并获取移动后的索引值，用于下面状态的修改
 	 			checkListAddIndex = mainForm.checklistDone.addItem(mainForm.checklistTodo.getItemText(selIndex,1));
 	 			
 	 			// 将已完成的事项状态改为勾选
 	 			mainForm.checklistDone.setChecked(checkListAddIndex);
 	 			
 	 			// 将待办事项转移后，删除待办列表中的记录
 	 			mainForm.checklistTodo.delItem(selIndex);
 	 		} 
 	 	}  
 	 }
 	 elseif( code = 0xFFFFFFFB/*_NM_RCLICK*/ ){
 	 
 	 	var x,y = win.getMessagePos();  
 	 	var nmListView = mainForm.checklistTodo.getNotifyMessage(code,ptr);
 	 	//创建弹出菜单
		var popmenu = win.ui.popmenu(mainForm); 
		popmenu.add('删除',function(id){ 
				mainForm.checklistTodo.delItem( nmListView.iItem )
		} ) 
		popmenu.popup(x,y,true);
		popmenu.close();
 	 }
 	 elseif(code = 0xFFFFFF51/*_LVN_BEGINLABELEDITW*/ ){ 
	 	return false; //允许编辑项
	 }
	 elseif( code == 0xFFFFFF50/*_LVN_ENDLABELEDITW*/ ){
	 	var dispInfo = mainForm.checklistTodo.getNotifyDispInfo(code,ptr); 
	 	if( dispInfo ? dispInfo.item.text ) {
	 		mainForm.checklistTodo.setItemText(dispInfo.item.text, dispInfo.item.iItem);
	 	}
	 }
     elseif(code = 0xFFFFFFFD/*_NM_DBLCLK*/) {
         mainForm.checklistTodo.editLable()
     }
 
}

//  去勾选已完成事项实现转移到待办的功能
mainForm.checklistDone.onnotify = function(id,code,ptr){

	if( code == 0xFFFFFF9B/*_LVN_ITEMCHANGED*/ ){ 
 	 	var nmChecklist = mainForm.checklistDone.getNotifyMessage(code,ptr);
 	 	if( !nmChecklist )
 	 		return;
 	 		
 	 	if( nmChecklist.uOldState & 0xF000/*_LVIS_STATEIMAGEMASK*/){
 	 		var selIndex = nmChecklist.iItem;
 	 		if(! mainForm.checklistDone.getChecked( selIndex ) ){
 	 			
 	 			checkListAddIndex = mainForm.checklistTodo.addItem(mainForm.checklistDone.getItemText(selIndex,1));
 	 			
 	 			mainForm.checklistTodo.setChecked(checkListAddIndex,false);
 	 			
 	 			mainForm.checklistDone.delItem(selIndex);
 	 		} 
 	 	}  
 	 }
 	 elseif( code = 0xFFFFFFFB/*_NM_RCLICK*/ ){
 	 
 	 	var x,y = win.getMessagePos();  
 	 	var nmListView = mainForm.checklistDone.getNotifyMessage(code,ptr);
 	 	//创建弹出菜单
		var popmenu = win.ui.popmenu(mainForm); 
		popmenu.add('删除',function(id){ 
				mainForm.checklistDone.delItem( nmListView.iItem )
		} ) 
		popmenu.popup(x,y,true);
		popmenu.close();
 	 }  
    
}


// 增加窗口贴边停靠吸附到上左右边栏的功能
var side = "";
mainForm.wndproc = function(hwnd,msg,wParam,lParam){
    select(msg){
        case 0x3/*_WM_MOVE*/  {//移动窗口
            if(!mainForm.processing){//不在处理中
                checkWindowPos()
            }
        }case 0xA1/*_WM_NCLBUTTONDOWN*/ {//按下左键移动窗口
            side=""
        }case 0xA0/*_WM_NCMOUSEMOVE*/{//在标题栏及窗的边框体移动鼠标
            checkWindowPos()
        }
    }
}

checkWindowPos = function(){
    var scrw = win.getScreen();
    var left,top,width = win.getPos(mainForm.hwnd,true);
    var right = left + width;
    if(left <= 0 )  side = "left";
    if(scrw <= right) side = "right";           
    if(top <= 0)  side = "top";
    if(left>0 && top>0 && scrw>right )  side = ""
}

dock = function(bl){
    if( win.isIconic(mainForm.hwnd) and mainForm.docking and  side != ""){
        mainForm.show( 0x1/*_SW_NORMAL*/ )
    }elseif(win.isIconic(mainForm.hwnd)){//缩至任务栏不处理后续语句
        return;
    }
    if(mainForm.processing){return ; }//正在处理
    mainForm.processing = true;
    var arg = bl ? {0xC00000/*_WS_CAPTION*/;null} : {null;0xC00000/*_WS_CAPTION*/};
    mainForm.modifyStyle(table.unpack(arg)); 
        
    var scrw = win.getScreen();
    var n;
    var countnum = 10;
    var delnum = 1;
    var left,top,width,height = win.getPos(mainForm.hwnd,true);
    if(bl){//逐渐隐藏
        select(side) {
            case "left"{
                if(mainForm.left = 0){
                for(i=1;countnum;1){
                    n = (i=countnum) ? 4 : width - (width/countnum)*i;
                    mainForm.left = -width + n;
                    mainForm.right = n;
                    win.delay(delnum)
                }
                }
        }case "top"{
                if(mainForm.top = 0){ 
                for(i=1;countnum;1){
                    n = (i=countnum) ? 4 : height - (height/countnum)*i;
                    mainForm.top = -height + n;
                    mainForm.bottom = n;
                    win.delay(delnum)
                }
                }
            }case "right"{
                if(mainForm.right = scrw){
                for(i=1;countnum;1){
                    n = (i=countnum) ? 4 : width - (width/countnum)*i;
                    mainForm.left = scrw - n;
                    mainForm.right = scrw -n + width;
                    win.delay(delnum)
                }
                }
            }
        }
    }else{
        if(mainForm.docking){//逐渐恢复
            win.setTopmost(mainForm.hwnd);
            win.setTopmost(mainForm.hwnd,false)
            select(side) {
                case "left"{
                    if(mainForm.right = 4){
                        for(i=countnum;1;-1){
                            n = (i=1) ? width : width - (width/countnum)*i;
                            mainForm.left = -width + n;
                            mainForm.right = n;
                            win.delay(delnum)
                        }
                    }
                }case "top"{
                    if(mainForm.bottom = 4){
                        for(i=countnum;1;-1){
                            n = (i=1) ? height : height - (height/countnum)*i;
                            mainForm.top = -height + n;
                            mainForm.bottom = n;
                            win.delay(delnum)
                        }
                    }
                }case "right"{
                    if(mainForm.left = scrw-4){
                        for(i=countnum;1;-1){
                            n = (i=1) ? width : width - (width/countnum)*i;
                            mainForm.left = scrw - n;
                            mainForm.right = scrw -n + width;
                            win.delay(delnum)
                        }
                    }
                }
            }
        }
    }
    left,top,width,height = win.getPos(mainForm.hwnd,true);
    select(side) {
        case "left"{
            mainForm.left = bl ? (-width+4) : (!mainForm.docking ? left : 0); //鼠标窗口内，分未吸附和已吸附两种情况
            mainForm.right = bl ? 4 : (!mainForm.docking ? (width + left) : width);
        }case "top"{
            mainForm.top = bl ? (-height+4) : (!mainForm.docking ? top : 0);
            mainForm.bottom = bl ? 4 : (!mainForm.docking ? (height + top) : height);     
        }case "right"{
            mainForm.left = bl ? (scrw-4) : (!mainForm.docking ? mainForm.left : scrw-width);
            mainForm.right = bl ? (scrw-4 + width) : (!mainForm.docking ? mainForm.right : scrw);
        }
    }
    mainForm.docking = bl ? true : false;//记录状态
    mainForm.processing = false;//处理完
}

var tmId = mainForm.addtimer(
    100,
    function(){
        var hwnd = winex.fromPoint( mouse.getPos() );
        if(win.getThreadProcessId(hwnd)  !== thread.getId()){ //判断鼠标是否在窗体内
            if(#side>0) dock(true); //side为空字串说明在中间或底部，无需处理
        }else{     
            if(#side>0) dock(false);
        }
    }
)

// 
function saveIniFile(){
    iniData.write("ToDoList",null) 
	iniData.write("DoneList",null) 

    var todoList = mainForm.checklistTodo.items;	
	for(i=1;#todoList;1){
      	keyString = "list" + i;
 	  	iniData.write("ToDoList",keyString,mainForm.checklistTodo.getItemText(i,1));
	}
			
    var doneList = mainForm.checklistDone.items;	
	for(i=1;#doneList;1){
      	keyString = "list" + i;
 	  	iniData.write("DoneList",keyString,mainForm.checklistDone.getItemText(i,1));
	}	
}


// 软件退出前保存数据
mainForm.wndproc = function(hwnd,message,wparam,lparam){
    select(message) {   //判断消息类型
        case 0x10/*_WM_CLOSE*/  //窗口关闭消息
        {
			saveIniFile();
        }
    }
}

//创建主菜单
var menu = win.ui.menu(mainForm);

mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单
mainForm.popmenu.add('&打开文件',function(id){
	// 未关闭窗口情况下切换记录文件也需要保存一次数据
	saveIniFile();
	
	// 打开之前保存的记录
	var fileLoaded = fsys.dlg.open("指定文件|setodo_*.ini|","选择打开历史记录文件","/data");
	
	var fileLoadedName = io.splitpath(fileLoaded).file;
	
	iniData = fsys.ini("\data\" + fileLoadedName);
	
	mainForm.checklistTodo.clear();
	mainForm.checklistDone.clear();
	
	// 软件重新加载选定文件的记录信息
	loadIniFile();
});

menu.add('文件',mainForm.popmenu)

//----分隔处

// 第二个菜单
mainForm.secondmenu = win.ui.popmenu(mainForm);//创建弹出菜单

mainForm.secondmenu.add('&使用说明',function(id){
	process.execute("http://www.bituplink.com/setodo");	
});

mainForm.secondmenu.add('&捐助',function(id){
	process.execute("http://www.bituplink.com/donate");
});

menu.add('帮助', mainForm.secondmenu)


// 增加托盘功能支持，包括托盘图标，右键托盘功能列表，托盘鼠标时间等
exeTray = win.util.tray(mainForm.hwnd);
exeTray.message = 0xACCF/*_WM_TRAYMESSAGE*/;

mainForm.popmenuTray = win.ui.popmenu(mainForm);
mainForm.popmenuTray.add('打开窗口',function(id){
    mainForm.show(true)//打开窗口
});
mainForm.popmenuTray.add('最小化',function(id){
    mainForm.hitmin()
})
mainForm.popmenuTray.add('退出',function(id){ 
    mainForm.close() 
})

mainForm.wndproc = function(hwnd,message,wparam,lparam){

    if( message == 0xACCF/*_WM_TRAYMESSAGE*/ ) { //托盘回调信息
    
        select(lparam){
            case 0x203/*_WM_LBUTTONDBLCLK*/{ //双击托盘图标打开窗口 
                if( win.isVisible(mainForm.hwnd) ){
                    mainForm.hitmin()  //最小化窗口 
                }
                else {
                    mainForm.show(0x9/*_SW_RESTORE*/);
                    win.setForeground(mainForm.hwnd)
                }
            }
            case 0x205/*_WM_RBUTTONUP*/ {//单击鼠标右键弹出菜单
                x,y = mouse.getPos();
                mainForm.popmenuTray.popup( x,y,true )
            }  
            case 0x201/*_WM_LBUTTONDOWN*/ {//单击鼠标左键前置窗口
                win.setForeground(mainForm.hwnd) 
            }        
        }                                                  
    } 
    elseif( message == 0x112/*_WM_SYSCOMMAND*/ ){ //系统命令消息
        if( wparam == 0xF020/*_SC_MINIMIZE*/ ){ //用户点击了最小化按钮
            mainForm.show(false); //隐藏窗口
            return true;//阻击默认消息传递，取消最小化过程
        } 
    }
}  

mainForm.onClose = function(hwnd,message,wParam,lParam){
    exeTray.delete();
} 


mainForm.enableDpiScaling();
mainForm.show();

return win.loopMessage();